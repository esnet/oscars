image: wharf.es.net/dockerhub-proxy/library/docker:28.2.2-dind

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERT_DIR: ""
  RELEASE_BRANCH: master
  DEV_BRANCH: develop
  MAIN_BRANCH: master
  ENVIRONMENT: production
  BACKEND_WHARF_NAME: oscars-backend
  FRONTEND_WHARF_NAME: oscars-frontend
  BACKEND_IMAGE_TAG: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG-backend:$CI_COMMIT_SHA
  FRONTEND_IMAGE_TAG: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG-frontend:$CI_COMMIT_SHA

stages:
  - build
  - test
  - profile
  - push

.wharf_logout: &wharf_logout |-
  docker logout "$WHARF_SITE"

.wharf_login: &wharf_login |-
  echo "$WHARF_TOKEN" | docker login -u "$WHARF_USER" "$WHARF_SITE" --password-stdin

.docker_login: &docker_login |-
  docker login -u gitlab-ci-token -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

backend:build_image:
  stage: build
  variables:
    DOCKERFILE_PATH: ./deploy/prod/backend.dockerfile
    CONTEXT_PATH: ./
  script:
    - *docker_login
    - DOCKER_BUILDKIT=1 docker build -t ${BACKEND_IMAGE_TAG} --progress=plain -f $DOCKERFILE_PATH $CONTEXT_PATH
    - docker push $BACKEND_IMAGE_TAG

backend:scan:
  stage: test
  needs: ["backend:build_image"]
  variables:
    CS_IMAGE: $BACKEND_IMAGE_TAG
  trigger:
    include:
      - project: "security/container-scanning"
        file: ".ESnet-container-scan.yml"

backend:test:
  stage: test
  needs: ["backend:build_image"]
  variables:
    DOCKERFILE_PATH: ./deploy/devel/backend.dockerfile
    CONTEXT_PATH: ./
  script:
    - DOCKER_BUILDKIT=1 docker build --progress=plain --target=test --no-cache -f $DOCKERFILE_PATH $CONTEXT_PATH

# MUST run in stand-alone, with in-memory DB only. We only want to profile
# OSCARS backend, not dependencies.
backend:profile:
  stage: profile
  before_script:
    - *docker_login
    - *wharf_login
  after_script:
    - *wharf_logout
  services: 
    - docker:dind
  needs: ["backend:build_image"]
  rules:
    - if: $CI_COMMIT_BRANCH != $RELEASE_BRANCH
  artifacts:
    paths:
      - ./backend/profiling
  variables:
    CONTEXT_PATH: ./
    DELAY_MIN: "0m"
    DURATION_MIN: "10m"
    TARGET_HOST: "oscars-backend:1099"
    FILENAME: "profiling/${CI_COMMIT_BRANCH}_${CI_PIPELINE_CREATED_AT}_oscars_backend_profile.jfr"

    DOCKER_DRIVER: overlay2
    DOCKER_BUILDKIT: 1
    # DOCKER_HOST: tcp://docker:2375 # Connect to the DinD service
    # DOCKER_TLS_CERTDIR: "" # Disable TLS for simplicity in this example
    CONTEXT_PATH: ./

    SPRING_PROFILES_ACTIVE: test
    HOSTNAME: oscars-backend
    JAVA_OPTS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:9201 \n
      -Dcom.sun.management.jmxremote \n
      -Dcom.sun.management.jmxremote.port=1099 \n
      -Dcom.sun.management.jmxremote.rmi.port=1099 \n
      -Djava.rmi.server.hostname=oscars-backend \n
      -Dcom.sun.management.jmxremote.local.only=false \n
      -Dcom.sun.management.jmxremote.authenticate=false \n
      -Dcom.sun.management.jmxremote.ssl=false"
    MAVEN_OPTS: ""
    OSCARS_BACKEND_WEB_PORT: 8201
    SPRING_DATASOURCE_URL: jdbc:postgresql://oscars-db:5432/oscars
    POSTGRES_USER: no_user
    POSTGRES_PASSWORD: no_password
    ESDB_API_KEY: no_esdb_api_key
    ESDB_URI: http://localhost:8080/esdb_api/v1
    ESDB_GRAPHQL_URI: http://localhost:8080/esdb_api/graphql
    TOPO_OSCARS_URL: http://localhost:8080/oscars-one/topology
    NSO_SYNC: "disabled"
    NSO_USERNAME: no_user
    NSO_PASSWORD: no_password
    NSO_URI: http://localhost:8080/restconf

  script:
    - mkdir -p backend/profiling
    - docker compose --version
    - ls -la
    - docker compose --progress=plain -f docker-compose.profiling.yml up oscars-db oscars-backend oscars-backend-profile
    # - docker network create
    #   --attachable
    #   --internal
    #   -d bridge
    #   oscars-local-net
    # - docker build -t postgres:14.1-alpine
    #   wharf.es.net/dockerhub-proxy/library/postgres:14.1-alpine
    # - docker build -t oscars-backend
    #   --build-arg TARGET_HOST="${HOSTNAME}"
    #   --build-arg JAVA_OPTS="${JAVA_OPTS}"
    #   --build-arg MAVEN_OPTS="${MAVEN_OPTS"
    #   -e POSTGRES_DB="${POSTGRES_DB}"
    #   -e POSTGRES_USER="${POSTGRES_USER}"
    #   -e POSTGRES_PASSWORD="${POSTGRES_PASSWORD"
    #   --port 5432
    #   --progress=plain
    #   --target=test
    #   --no-cache
    #   -f ./deploy/devel/backend.dockerfile
    #   $CONTEXT_PATH
    # - docker build -t oscars-backend-profile
    #   --progress=plain
    #   --build-arg TARGET_HOST="${TARGET_HOST}"
    #   --build-arg FILENAME="${FILENAME}"
    #   --no-cache
    #   -f ./deploy/devel/profile.dockerfile
    #   $CONTEXT_PATH
    # - docker run -d
    #   -e POSTGRES_DB="${POSTGRES_DB}"
    #   -e POSTGRES_USER="${POSTGRES_USER}"
    #   -e POSTGRES_PASSWORD="${POSTGRES_PASSWORD}"
    #   --network oscars-local-net
    #   --network-alias esdb
    #   postgres:14.1-alpine
    # - docker run -d
    #   -e SPRING_PROFILES_ACTIVE="${SPRING_PROFILES_ACTIVE}"
    #   -e HOSTNAME="${HOSTNAME}"
    #   -e JAVA_OPTS="${JAVA_OPTS}"
    #   -e MAVEN_OPTS="${MAVEN_OPTS}"
    #   -e OSCARS_BACKEND_WEB_PORT="${OSCARS_BACKEND_WEB_PORT}"
    #   -e SPRING_DATASOURCE_URL="${SPRING_DATASOURCE_URL}"
    #   -e POSTGRES_USER="${POSTGRES_USER}"
    #   -e POSTGRES_PASSWORD="${POSTGRES_PASSWORD}"
    #   -e ESDB_API_KEY="${ESDB_API_KEY}"
    #   -e ESDB_URI="${ESDB_URI}"
    #   -e ESDB_GRAPHQL_URI="${ESDB_GRAPHQL_URI}"
    #   -e TOPO_OSCARS_URL="${TOPO_OSCARS_URL}"
    #   -e NSO_SYNC="${NSO_SYNC}"
    #   -e NSO_USERNAME="${NSO_USERNAME}"
    #   -e NSO_PASSWORD="${NSO_PASSWORD}"
    #   -e NSO_URI="${NSO_URI}"
    #   -p 8201:8201
    #   -p 9201:9201
    #   -p 1099:1099
    #   --network oscars-local-net
    #   --network-alias oscars-backend
    #   oscars-backend
    # - docker run -d
    #   -e SPRING_PROFILES_ACTIVE="test"
    #   -e SPRING_DATASOURCE_URL="jdbc:hsqldb:mem:oscars_db;sql.syntax_pgs=true"
    #   -e SPRING_DATASOURCE_USERNAME="sa"
    #   -e SPRING_DATASOURCE_PASSWORD=""
    #   -e SPRING_JPA_HIBERNATE_DDL_AUTO=create-drop
    #   -e TARGET_HOST="oscars-backend:1099"
    #   -e FILENAME="profiling/latest.recording.jfr"
    #   -e DELAY_MIN="0m"
    #   -e DURATION_MIN="1m"
    #   -e OSCARS_BACKEND_WEB_PORT=8201
    #   --network oscars-local-net
    #   --network-alias oscars-backend-profile
    #   oscars-backend-profile
    # - docker stop $(docker ps -q)
    # - docker rm $(docker ps -a -q)
    # - docker network rm oscars-local-net

.backend:push:
  stage: push
  needs: ["backend:scan", "backend:test", "backend:profile"]
  before_script:
    - *docker_login
    - *wharf_login
  after_script:
    - *wharf_logout
  script:
    - |
      docker pull $BACKEND_IMAGE_TAG
      for tag in $TAGS; do
        if echo $tag | grep -q "BRANCH_TAG"; then
          tag=$(echo $tag | sed "s/BRANCH_TAG/$(echo $CI_COMMIT_REF_NAME | sed 's/\//-/g')/g")
        fi
        docker tag $BACKEND_IMAGE_TAG $tag
        docker push $tag
      done;

frontend:build_image:
  stage: build
  variables:
    DOCKERFILE_PATH: ./deploy/prod/frontend.dockerfile
    CONTEXT_PATH: ./frontend
  script:
    - *docker_login
    - DOCKER_BUILDKIT=1 docker build -t ${FRONTEND_IMAGE_TAG} --progress=plain -f $DOCKERFILE_PATH $CONTEXT_PATH
    - docker push $FRONTEND_IMAGE_TAG

frontend:scan:
  stage: test
  needs: ["frontend:build_image"]
  variables:
    CS_IMAGE: $FRONTEND_IMAGE_TAG
  trigger:
    include:
      - project: "security/container-scanning"
        file: ".ESnet-container-scan.yml"

.frontend:push:
  stage: push
  needs: ["frontend:scan"]
  before_script:
    - *docker_login
    - *wharf_login
  after_script:
    - *wharf_logout
  script:
    - |
      docker pull $FRONTEND_IMAGE_TAG
      for tag in $TAGS; do
        if echo $tag | grep -q "BRANCH_TAG"; then
          tag=$(echo $tag | sed "s/BRANCH_TAG/$(echo $CI_COMMIT_REF_NAME | sed 's/\//-/g')/g")
        fi
        docker tag $FRONTEND_IMAGE_TAG $tag
        docker push $tag
      done;

backend:publish:
  extends: .backend:push
  variables:
    TAGS: |
      $WHARF_SITE/$WHARF_PROJECT/$BACKEND_WHARF_NAME:$CI_PIPELINE_ID
      $WHARF_SITE/$WHARF_PROJECT/$BACKEND_WHARF_NAME:BRANCH_TAG

frontend:publish:
  extends: .frontend:push
  rules:
  variables:
    TAGS: |
      $WHARF_SITE/$WHARF_PROJECT/$FRONTEND_WHARF_NAME:$CI_PIPELINE_ID
      $WHARF_SITE/$WHARF_PROJECT/$FRONTEND_WHARF_NAME:BRANCH_TAG

backend:publish_release:
  extends: .backend:push
  rules:
    - if: $CI_COMMIT_BRANCH == $RELEASE_BRANCH
    - if: $CI_COMMIT_TAG
  variables:
    TAGS: |
      $WHARF_SITE/$WHARF_PROJECT/$BACKEND_WHARF_NAME:latest

frontend:publish_release:
  extends: .frontend:push
  rules:
    - if: $CI_COMMIT_BRANCH == $RELEASE_BRANCH
    - if: $CI_COMMIT_TAG
  variables:
    TAGS: |
      $WHARF_SITE/$WHARF_PROJECT/$FRONTEND_WHARF_NAME:latest
