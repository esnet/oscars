networks:
  topo-net:
    name: topo-net
    external: true

services:
  oscars-backend:
    container_name: oscars-nostack-backend
    hostname: oscars-backend
    networks:
      - topo-net
    build:
      context: ./
      args:
        HOSTNAME: ${HOSTNAME:-oscars-backend.ocd-stack.orb.local}
        JAVA_OPTS: "-XX:UseSVE=0"
        MAVEN_OPTS: "-XX:UseSVE=0"
      dockerfile: ./deploy/devel/backend.dockerfile
    image: oscars-backend-image:latest
    depends_on:
      oscars-db:
        condition: service_healthy
    ports:
      - "${OSCARS_BACKEND_WEB_PORT:-8201}:${OSCARS_BACKEND_WEB_PORT:-8201}"
      - "9201:9201" # Debugger port
      - "1099:1099" # profiler port
      - "8200:8200"
    environment:
      HOSTNAME: ${HOSTNAME:-oscars-backend.ocd-stack.orb.local}
      JAVA_OPTS: >
        -XX:UseSVE=0
        -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:9201
        -Dcom.sun.management.jmxremote
        -Dcom.sun.management.jmxremote.port=1099
        -Dcom.sun.management.jmxremote.rmi.port=1099
        -Djava.rmi.server.hostname="${HOSTNAME}"
        -Dcom.sun.management.jmxremote.local.only=false
        -Dcom.sun.management.jmxremote.authenticate=false
        -Dcom.sun.management.jmxremote.ssl=false
      MAVEN_OPTS: ${MAVEN_OPTS}:--XX:UseSVE=0
      OSCARS_BACKEND_WEB_PORT: ${OSCARS_BACKEND_WEB_PORT:-8201}
      SPRING_DATASOURCE_URL: jdbc:postgresql://oscars-db:5432/${POSTGRES_DB:-oscars}
      POSTGRES_USER: ${POSTGRES_USER:-oscars}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD-secret}
      ESDB_API_KEY: ${ESDB_API_KEY}
      ESDB_URI: ${ESDB_URI}
      ESDB_GRAPHQL_URI: ${ESDB_GRAPHQL_URI:-http://esdb:8000/esdb_api/graphql}
      TOPO_OSCARS_URL: ${TOPO_OSCARS_URL:-http://topo-oscars:8004/oscars-one/topology}
      NSO_USERNAME: ${NSO_USERNAME}
      NSO_PASSWORD: ${NSO_PASSWORD}
      NSO_URI: ${NSO_URI}
    healthcheck:
      test: nc -z localhost ${OSCARS_BACKEND_WEB_PORT:-8201} || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
  oscars-backend-test:
    build:
      context: ./
      dockerfile: ./deploy/devel/backend.dockerfile
      args:
        JAVA_OPTS: "-Xms512m -Xmx1024 -XX:UseSVE=0"
        MAVEN_OPTS: "-Xms512m -Xmx1024 -XX:UseSVE=0"
      target: test
    environment:
      JAVA_OPTS: "-XX:UseSVE=0"
      MAVEN_OPTS: "-XX:UseSVE=0"
      OSCARS_BACKEND_WEB_PORT: ${OSCARS_BACKEND_WEB_PORT:-8201}
      SPRING_DATASOURCE_URL: jdbc:postgresql://oscars-db:5432/${POSTGRES_DB:-oscars}
      POSTGRES_USER: ${POSTGRES_USER:-oscars}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD-secret}
      ESDB_API_KEY: ${ESDB_API_KEY}
      ESDB_URI: ${ESDB_URI}
      TOPO_OSCARS_URL: ${TOPO_OSCARS_URL:-http://topo-oscars:8004/oscars-one/topology}
      NSO_USERNAME: ${NSO_USERNAME}
      NSO_PASSWORD: ${NSO_PASSWORD}
      NSO_URI: ${NSO_URI}
    depends_on:
      - oscars-backend
  oscars-backend-profile:
    container_name: oscars-backend-profile
    depends_on:
      oscars-backend:
        condition: service_healthy
    build:
      context: ./
      dockerfile: ./deploy/devel/profile.dockerfile
    environment:
      DELAY_MIN: "1m"
      DURATION_MIN: "1m"
      TARGET_HOST: "oscars-backend:1099"
    links:
      - "oscars-backend:1099"
  oscars-load-test:
    depends_on:
      oscars-backend:
        condition: service_healthy
    build: 
      context: ./
      dockerfile: ./deploy/devel/load-test.dockerfile
    links:
      - "oscars-backend:1099"
  oscars-db:
    image: "wharf.es.net/dockerhub-proxy/library/postgres:14.1-alpine"
    container_name:   oscars-nostack-db
    networks:
      - topo-net
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-oscars}
      POSTGRES_USER: ${POSTGRES_USER:-oscars}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD-secret}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB:-oscars} -U ${POSTGRES_USER:-oscars}"]
      interval: 5s
      timeout: 5s
      retries: 5

  oscars-frontend:
    container_name: oscars-nostack-frontend
    build:
      context: frontend
      # use deploy/prod/frontend.dockerfile for production image
      dockerfile: ${OSCARS_FRONTEND_DOCKERFILE:-../deploy/devel/frontend.dockerfile}
    # mounted as volumes for dev mode hot reload
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    environment:
      # OSCARS_BACKEND_URL only used by production image
      OSCARS_BACKEND_URL: ${OSCARS_BACKEND_URL:-http://oscars-backend:8201}
    ports:
      - "${OSCARS_FRONTEND_WEB_PORT:-8181}:3000"
      - "9191:9191" # Debugger port
    networks:
      - topo-net
    depends_on:
      oscars-backend:
        condition: service_healthy
    links:
      - oscars-backend:8201
